RectangleMorph subclass: #Board	instanceVariableNames: 'arrAnswer answer callback clickedPeg created currentRow rows total'	classVariableNames: ''	poolDictionaries: ''	category: 'Mastermind'!!Board methodsFor: 'accessing' stamp: 'OJMS 3/19/2015 03:36'!answers	"Get the answers sdf;hsad;fjklhasdvjnsdfpjkbv"	^arrAnswer.! !!Board methodsFor: 'accessing' stamp: 'OJMS 3/19/2015 03:37'!answers: a	"George Lincoln"	arrAnswer := a.! !!Board methodsFor: 'accessing' stamp: 'OJMS 3/16/2015 16:51'!getAnswer: row peg: peg	| coll r |	"Get the mode of a particular SmallPeg within an AnswerPegs object in a particular row"	r := rows at: row.	coll := r getAnswers.	coll getPeg: peg.! !!Board methodsFor: 'accessing' stamp: 'OJMS 3/19/2015 00:52'!getClickedPeg	"Get the index of the PlayerPeg which was clicked"	^clickedPeg.! !!Board methodsFor: 'accessing' stamp: 'JJG 3/19/2015 04:35'!getPlayer: row peg: peg	| coll r |	"Get the mode of a particular BigPeg within an PlayerPegs object in a particular row"	r := rows at: row.	coll := r getPlayer.	^coll getPeg: peg.! !!Board methodsFor: 'accessing' stamp: 'OJMS 3/19/2015 04:03'!getRows	"Get the number of rows on the board"	^total.! !!Board methodsFor: 'accessing' stamp: 'OJMS 3/19/2015 03:08'!row	"Get the rowz bang bang swack swacklings 3:08 AM"	^currentRow.! !!Board methodsFor: 'accessing' stamp: 'OJMS 3/19/2015 03:08'!row: r	"Set the rowinz and things dfgasdfjklhdfjghasd;uigdfhsagvdfjkgnxcvsdfjkl"	currentRow := r.! !!Board methodsFor: 'accessing' stamp: 'OJMS 3/15/2015 03:53'!setAnswer: row peg: peg mode: mode	| coll r |	"Set the mode of a particular SmallPeg within an AnswerPegs object in a particular row"	r := rows at: row.	coll := r getAnswers.	coll setPeg: peg mode: mode.! !!Board methodsFor: 'accessing' stamp: 'OJMS 3/18/2015 20:16'!setAnswerRow: row	"Save a reference to the answer row"	answer := row.! !!Board methodsFor: 'accessing' stamp: 'OJMS 3/19/2015 02:37'!setClickedPeg: peg	"Set the index of the PlayerPeg which was clicked"	clickedPeg := peg.! !!Board methodsFor: 'accessing' stamp: 'OJMS 3/15/2015 03:57'!setPlayer: row peg: peg mode: mode	| coll r |	"Set the mode of a particular BigPeg within an PlayerPegs object in a particular row"	r := rows at: row.	coll := r getPlayer.	coll setPeg: peg mode: mode.! !!Board methodsFor: 'accessing' stamp: 'OJMS 3/19/2015 04:13'!theBigReveal	| coll |	"Show all hidden things!!"	coll := answer getPlayer.	coll setPeg: 1 mode: ( arrAnswer at: 1 ).	coll setPeg: 2 mode: ( arrAnswer at: 2 ).	coll setPeg: 3 mode: ( arrAnswer at: 3 ).	coll setPeg: 4 mode: ( arrAnswer at: 4 ).! !!Board methodsFor: 'initialization' stamp: 'OJMS 3/15/2015 03:55'!addRow: r	"Add a row to the array"	created := created + 1.	rows at: created put: r.! !!Board methodsFor: 'initialization' stamp: 'OJMS 3/15/2015 03:33'!initCreated	"Set the total number of created rows to 0"	created := 0.! !!Board methodsFor: 'initialization' stamp: 'OJMS 3/15/2015 03:35'!initRows	"Initialize the rows array"	rows := Array new: total.! !!Board methodsFor: 'initialization' stamp: 'OJMS 3/15/2015 03:30'!setRows: r	"Establish the number of rows on the board"	total := r.! !!Board methodsFor: 'event handling' stamp: 'OJMS 3/19/2015 02:07'!action: cbk	"Set the BlockContext Row will call when it is clicked"	callback := cbk.! !!Board methodsFor: 'event handling' stamp: 'OJMS 3/19/2015 02:38'!pegClicked: peg	"Get the index of the clicked peg"	callback value.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Board class	instanceVariableNames: ''!!Board class methodsFor: 'instance creation' stamp: 'OJMS 3/19/2015 03:06'!new: rows	| bkg instance row spacer |	"Initialize the memory of the board to hold all of its objects"	instance := super new.	instance initCreated.	instance setRows: rows.	instance initRows.	instance row: 1.	"Create the super background"	bkg := RectangleMorph new.	"Creates a Mastermind board with N rows"	instance color: Color brown.	instance hResizing: #shrinkWrap.	instance layoutPolicy: TableLayout new.	instance listDirection: #topToBottom.	instance setRows: rows.	instance vResizing: #shrinkWrap.	"Create each row"	1 to: rows do: [ :n |		row := Row new.		row action: [			instance pegClicked: ( row getClickedPeg ).		].				instance addMorph: row.		instance addRow: row.	].	"Create visual space between the player and answer rows"	spacer := (RectangleMorph new) extent: 15@15.	spacer borderWidth: 0. "Hide dat ying n' yang, yo"	spacer color: Color transparent.	instance addMorph: spacer.	"Create the answer row" 	row := Row new: true.	instance setAnswerRow: row.	instance addMorph: row.	^instance! !Object subclass: #Colors	instanceVariableNames: 'created colors total'	classVariableNames: ''	poolDictionaries: ''	category: 'Mastermind'!!Colors methodsFor: 'accessing' stamp: 'OJMS 3/18/2015 04:33'!addColor: clr	"Add a color to the array of colors"	created := created + 1.	colors at: created put: clr.! !!Colors methodsFor: 'accessing' stamp: 'OJMS 3/18/2015 03:57'!getColor: idx	"Get a value from the colors array"	^colors at: idx.! !!Colors methodsFor: 'accessing' stamp: 'OJMS 3/18/2015 23:05'!getColorIndex: clr	| index |	"Get the index of a particular color"	index := 0.	1 to: total do: [ :i |		( ( colors at: i ) == clr )			ifTrue: [				index := i.			].	].	^index.! !!Colors methodsFor: 'initialize-release' stamp: 'OJMS 3/18/2015 02:25'!initCreated	"Initialize to the total number of created colors"	created := 0.! !!Colors methodsFor: 'initialize-release' stamp: 'OJMS 3/18/2015 02:24'!setTotal: tot	"Set the size of the colors array"	colors := Array new: tot.	total := tot.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Colors class	instanceVariableNames: ''!!Colors class methodsFor: 'initialize-release' stamp: 'OJMS 3/18/2015 04:01'!new: total	| instance |	"Create the array for the colors"	instance := super new.	instance initCreated.	instance setTotal: total.	^instance.! !Colors subclass: #AnswerColors	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Mastermind'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AnswerColors class	instanceVariableNames: ''!!AnswerColors class methodsFor: 'initialize-release' stamp: 'OJMS 3/18/2015 04:09'!new	| instance |	"Create the array of colors for the player's pegs"	instance := super new: 3.	instance addColor: Color black.	instance addColor: Color white.	instance addColor: Color transparent.	^instance.! !Object subclass: #FullCorrectChecker	instanceVariableNames: ''	classVariableNames: 'Solution SolutionSize'	poolDictionaries: ''	category: 'Mastermind'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FullCorrectChecker class	instanceVariableNames: ''!!FullCorrectChecker class methodsFor: 'as yet unclassified' stamp: 'AMM 3/18/2015 20:44'!checkFullCorrect: playerGuess	"takes an array of player guesses and returns the number that are fully correct"	| numFullRight |	numFullRight := 0.	1 to: SolutionSize do: [:t|		((Solution at: t) = (playerGuess at: t)) ifTrue: [			numFullRight:=numFullRight + 1.		].	].	Transcript show: numFullRight.	^numFullRight.! !!FullCorrectChecker class methodsFor: 'as yet unclassified' stamp: 'AMM 3/18/2015 20:05'!setAnswer: answerArray size: arraySize	"sets the class variables of answer and number of pegs"	Solution := answerArray.	SolutionSize := arraySize.! !RectangleMorph subclass: #GameBoard	instanceVariableNames: ''	classVariableNames: 'Bored Buttons Next'	poolDictionaries: ''	category: 'Mastermind'!!GameBoard methodsFor: 'as yet unclassified' stamp: 'AMM 3/19/2015 03:28'!getBored	^Bored! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GameBoard class	instanceVariableNames: ''!!GameBoard class methodsFor: 'as yet unclassified' stamp: 'OJMS 3/19/2015 05:25'!new: rows| colorz instance restart randSet|	"Create enough room for the button board"	instance := super new.	instance layoutPolicy: TableLayout new.	instance listDirection: #leftToRight.	instance cellInset: 5.	instance layoutInset: 5.	instance unlock.	instance hResizing: #shrinkWrap.	instance vResizing: #shrinkWrap.	Bored := Board new: rows.	Buttons := ButtonBoard new.	Next := NextButton new.	restart := RestartButton new.	instance addMorph: Buttons.	instance addMorph: Bored.	instance addMorph: Next.	instance addMorph: restart.	instance color: (Color paleBuff).	"Initializes board values"	randSet := Array new: 4.	randSet := SetGenerator randomize.		Bored answers: randSet.	FullCorrectChecker setAnswer: randSet size: 4.	PartialCorrectChecker setAnswer: randSet size: 4.	"Wire things"	colorz := Buttons getSelectedColor.	Buttons action: [		colorz := Buttons getSelectedColor.		Transcript show: colorz.	].	Bored action: [ | col row |		col := Bored getClickedPeg.		row := Bored row.		Bored setPlayer: row peg: col mode: colorz.		Bored changed.	].		^instance.! !RectangleMorph subclass: #InfoScreen	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Mastermind'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!InfoScreen class	instanceVariableNames: ''!!InfoScreen class methodsFor: 'instance creation' stamp: 'JJG 3/19/2015 01:58'!new	"creates a text morph from an instructions text file"	| fileContents instance info name |	instance := super new.		"Set the morph's layout properties"	instance hResizing: #shrinkWrap.	instance layoutPolicy: TableLayout new.	instance listDirection: #topToBottom.	instance vResizing: #shrinkWrap.	instance cellInset: 10.	instance layoutInset: 50.	instance color: Color paleTan.	instance addMorph: (StartButton new).	info := TextMorph new.	"currently reading game instructions from a text file may need to change this"	"fileContents := FileStream      readOnlyFileNamed: 'C:\Users\gearhartjj1\Documents\College\Senior year (the end)\Spring\OOPLs\Squeak-4.5-All-In-One\Squeak-4.5-All-in-One.app\Contents\test.txt'       do: [:f | f contents ].	info contents: fileContents."	info contents: 'Instructions:Guess what combination the computer makes!!-Click on the color of the peg to use-Then click on the peg in the row you want to fill-click go when you want to make your guessThe computer then shows your accuracy:-The small pegs on the left shows your results-White pegs represent a peg in right color wrong position-Black pegs represent a peg right color and right position'.	info fontName: #ComicBold size: 18.	info lock.	instance addMorph: info.	name := TextMorph new.	name contents: 'Mastermind'.	name hResizing: #shrinkWrap.	name layoutPolicy: TableLayout new.	name listDirection: #topToBottom.	name vResizing: #shrinkWrap.	name cellInset: 10.	name layoutInset: 50.	name fontName: #ComicBold size: 18.	name lock.	instance addMorph: name.	^instance.! !!InfoScreen class methodsFor: 'instance creation' stamp: 'JJG 3/19/2015 01:55'!new: message	| instance text |	instance := self new.	text := TextMorph new.	text contents: message.	instance addMorph: text.	^instance.! !RectangleMorph subclass: #NewGameButton	instanceVariableNames: ''	classVariableNames: 'Message'	poolDictionaries: ''	category: 'Mastermind'!!NewGameButton methodsFor: 'event handling' stamp: 'JJG 3/19/2015 05:06'!handlesMouseDown: evt 	^true.! !!NewGameButton methodsFor: 'event handling' stamp: 'JJG 3/19/2015 05:07'!mouseUp: evt	| newGame |	newGame := InfoScreen new: Message.	newGame openInWorld.	owner abandon.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NewGameButton class	instanceVariableNames: ''!!NewGameButton class methodsFor: 'instance creation' stamp: 'JJG 3/19/2015 05:44'!new: message	| instance text |	instance := super new.	Message := message.		text := TextMorph new.	text contents: 'Restart'.	text lock.	instance addMorph: text.	^instance.! !RectangleMorph subclass: #NextButton	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Mastermind'!!NextButton methodsFor: 'event handling' stamp: 'JJG 3/19/2015 03:46'!handlesMouseDown: evt 	^true.! !!NextButton methodsFor: 'event handling' stamp: 'JJG 3/19/2015 05:40'!mouseUp: evt	"get the number total and partially correct and change the GUI appropriately"	| numTotalCorrect numPartCorrect guessArray board currentRow peg button |	"get the player guess from the board"	board := owner getBored.	currentRow := board row.	guessArray := Array new: 4.	"at put"	1 to: 4 do: [ :i|		peg := (board getPlayer: currentRow peg: i).		Transcript show: peg.		"if a peg is transparent then dont do anything yet"		peg = 7 ifTrue: [			^0.		].		guessArray at: i put: peg.	].	"guessArray := #(1 2 3 4)."	numTotalCorrect := FullCorrectChecker checkFullCorrect: guessArray.	numPartCorrect := PartialCorrectChecker checkPartialCorrect: guessArray.	"check to see if the number of rows is over the max"	(currentRow >= (board getRows) & (numTotalCorrect < 4)) ifTrue: [		"do big reveal"		board theBigReveal.		Transcript show: 'hi'.		board lock.		button := NewGameButton new: 'Sorry you lost'.		owner addMorph: button.		^0.	].	"if num Total Correct is 4 then the game is over"	numTotalCorrect = 4 ifTrue:[		"big reveal the solution and restart"		board theBigReveal.		button := NewGameButton new: 'You Won!!!!'.		board lock.		owner addMorph: button.	].	"set the board small pegs accordingly"	1 to: numTotalCorrect do: [	:i|		Transcript show: currentRow.		board setAnswer: currentRow peg: i mode: 1.	].	1 to: numPartCorrect do: [ :j|		board setAnswer: currentRow peg: (j+numTotalCorrect) mode: 2.	].	"increment the board row number"	board row: (currentRow+1).	board changed.	! !!NextButton methodsFor: 'as yet unclassified' stamp: 'AMM 3/19/2015 01:07'!handesMouseDown: evt	^true.! !!NextButton methodsFor: 'as yet unclassified' stamp: 'JJG 3/19/2015 05:25'!mouseUp	"get the number total and partially correct and change the GUI appropriately"	| numTotalCorrect numPartCorrect guessArray board currentRow |	"get the player guess from the board"	board := owner getBored.	currentRow := board row.	currentRow > (board getRows) ifTrue: [		board theBigReveal.		^0.	].	guessArray := Array new: 4.	1 to: 4 do: [ :i|		guessArray at: i put: (board getPlayer: currentRow peg: i).	].	numTotalCorrect := FullCorrectChecker checkFullCorrect: guessArray.	numPartCorrect := PartialCorrectChecker checkPartialCorrect: guessArray.		Transcript show: numTotalCorrect.	"if num Total Correct is 4 then the game is over"	numTotalCorrect = 4 ifTrue:[		"reveal the solution and restart"		board theBigReveal.	].	"set the board small pegs accordingly"	1 to: numTotalCorrect do: [	:i|		Transcript show: 'partial'.		Transcript show: i.		board setAnswer: currentRow peg: i mode: 1.	].	1 to: numPartCorrect do: [ :j|		Transcript show: 'total'.		Transcript show: j.		board setAnswer: currentRow peg: (j+numTotalCorrect) mode: 2.	].	"increment the board row number"	board row: (currentRow+1).	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NextButton class	instanceVariableNames: ''!!NextButton class methodsFor: 'as yet unclassified' stamp: 'JJG 3/19/2015 05:01'!new	| instance text|	instance := super new.	instance borderWidth: 2.	instance color: Color lightBrown.	instance extent: 50@150.		text := TextMorph new.	text contents: 'Next'.	text position:11@60.	text lock.	instance addMorph: text.	^instance! !Object subclass: #PartialCorrectChecker	instanceVariableNames: ''	classVariableNames: 'Solution SolutionSize'	poolDictionaries: ''	category: 'Mastermind'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PartialCorrectChecker class	instanceVariableNames: ''!!PartialCorrectChecker class methodsFor: 'as yet unclassified' stamp: 'JJG 3/17/2015 01:28'!checkPartialCorrect: playerGuess	"takes an array of player guesses and returns the number that are partially correct"	| numPartRight alreadyChosenArray alreadyChosen numUsed done |	alreadyChosenArray := Array new: SolutionSize.	numPartRight := 0.	numUsed := 0.	alreadyChosen := False.	done := False.	"first go through guess once to mark pegs that are completely correct so they won't be used as half correct pegs"	1 to: SolutionSize do: [:t|		((Solution at: t) = (playerGuess at: t)) ifTrue: [			numUsed:=numUsed + 1.			alreadyChosenArray at: numUsed put: t.		].	].	1 to: SolutionSize do: [ :i |		done := False.		1 to: SolutionSize do: [:j |			alreadyChosen := False.			"check to see if answer peg i has already been marked as half correct"			1 to: numUsed do: [:k|				j = (alreadyChosenArray at: k) ifTrue: [					"should break out of loop here but I don't know if that is possible..."					alreadyChosen := True.				].			].			((playerGuess at: i) = (Solution at: j) & (i~=j) & (alreadyChosen~=True) & (done ~=True)) ifTrue: [				"done variable used to indicate that a match has been found. break statement would be better..."				done := True.				numPartRight := numPartRight + 1.				numUsed := numUsed + 1.				"keep track that the solution at i has been used as half right peg"				(numUsed<=SolutionSize) ifTrue:[					alreadyChosenArray at: numUsed put: j.				].				].		].	].	Transcript show: numPartRight.	^numPartRight.	! !!PartialCorrectChecker class methodsFor: 'as yet unclassified' stamp: 'JJG 3/16/2015 23:51'!setAnswer: answerArray size: arraySize	"sets the class variables of answer and number of pegs"	Solution := answerArray.	SolutionSize := arraySize.! !CircleMorph subclass: #Peg	instanceVariableNames: 'callback number'	classVariableNames: ''	poolDictionaries: ''	category: 'Mastermind'!!Peg methodsFor: 'initialization' stamp: 'OJMS 3/19/2015 04:26'!getPegNumber	"Get an internal representation of a peg number, for use when in a collection"	^number.! !!Peg methodsFor: 'initialization' stamp: 'OJMS 3/14/2015 21:02'!setColor: clr	"FIll in the peg with a color"	color := clr.! !!Peg methodsFor: 'initialization' stamp: 'OJMS 3/18/2015 21:48'!setPegNumber: num	"Set an internal representation of a peg number, for use when in a collection"	number := num.! !!Peg methodsFor: 'event handling' stamp: 'OJMS 3/18/2015 01:41'!action: cbk	"Set the BlockContext Peg will call when it is clicked"	callback := cbk.! !!Peg methodsFor: 'event handling' stamp: 'OJMS 3/18/2015 01:41'!handlesMouseDown: evt	"This Peg will respond to mouse clicks" 	^true.! !!Peg methodsFor: 'event handling' stamp: 'OJMS 3/18/2015 01:39'!mouseUp: evt	"Call the callback BlockContext on mouse up:"	callback value.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Peg class	instanceVariableNames: ''!!Peg class methodsFor: 'initialize-release' stamp: 'OJMS 3/18/2015 21:49'!new: radius	"Create an empty peg without any color, and a small border"	| instance |	instance := super new.	instance borderWidth: 2.	instance color: Color transparent.	instance extent: radius@radius.	instance lock.	instance setPegNumber: 0.		^instance! !Peg subclass: #BigPeg	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Mastermind'!!BigPeg methodsFor: 'initialization' stamp: 'OJMS 3/19/2015 04:27'!setColor: clr	| colorMgr |	"FIll in the peg with a color"	colorMgr := PlayerColors new.	color := colorMgr getColor: clr.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BigPeg class	instanceVariableNames: ''!!BigPeg class methodsFor: 'initialize-release' stamp: 'OJMS 3/18/2015 21:38'!new	| instance |	"Create a larger peg from the base Peg class"	instance := super new: 30.	instance setColor: 7.	instance unlock.	^instance.! !RectangleMorph subclass: #PegCollection	instanceVariableNames: 'created pegs total'	classVariableNames: ''	poolDictionaries: ''	category: 'Mastermind'!!PegCollection methodsFor: 'accessing' stamp: 'OJMS 3/15/2015 02:55'!addPeg: peg	"Add a peg to the array of pegs"	created := created + 1.	pegs at: ((total + 1) - created) put: peg.	"total + 1 aligns this to a 1-based array, and the (total + 1) - created	prevents the ordering of the pegs in the array from appearing in	reverse order when on display"! !!PegCollection methodsFor: 'initialization' stamp: 'OJMS 3/15/2015 02:58'!initCreated	"Set the total number of created pegs to 0"	created := 0.! !!PegCollection methodsFor: 'initialization' stamp: 'OJMS 3/18/2015 01:45'!initPegArray	"Create the array to hold all of the pegs"	pegs := Array new: total.! !!PegCollection methodsFor: 'initialization' stamp: 'OJMS 3/15/2015 02:58'!setTotal: t	"Set the total number of pegs this class shall hold"	total := t.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PegCollection class	instanceVariableNames: ''!!PegCollection class methodsFor: 'initialize-release' stamp: 'OJMS 3/18/2015 01:45'!new	"Create a collection with a default number of Peg objects"	^self new: 4.! !!PegCollection class methodsFor: 'initialize-release' stamp: 'OJMS 3/19/2015 00:58'!new: total	| instance |		"Initialize all of the memory this class will need to hold its Peg objects"	instance := super new.	instance setTotal: total. "Will hold N pegs"	instance initCreated.	instance initPegArray.	"instance lock."	"Set the morph's layout properties"	instance hResizing: #shrinkWrap.	instance layoutPolicy: TableLayout new.	instance listDirection: #topToBottom.	instance vResizing: #shrinkWrap.	"Don't care about dat background morph, yo"	instance borderWidth: 0.	instance color: Color transparent.	^instance.! !PegCollection subclass: #AnswerPegs	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Mastermind'!!AnswerPegs methodsFor: 'accessing' stamp: 'OJMS 3/18/2015 18:44'!getPeg: peg	"Get the marking mode of a peg"	( peg between: 1 and: 4 )		ifTrue: [ | color item |			color := AnswerColors new.			item := pegs at: peg.						^color getColorIndex: ( item color ).		].! !!AnswerPegs methodsFor: 'accessing' stamp: 'JJG 3/19/2015 05:28'!setPeg: peg mode: mode	"Mark a peg as correct, partially correct, or clear it"	( peg between: 1 and: 4 )		ifTrue: [			( mode between: 1 and: 3 )				ifTrue: [ | color item |					color := AnswerColors new.					item := pegs at: peg.								item setColor: mode.				].		].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AnswerPegs class	instanceVariableNames: ''!!AnswerPegs class methodsFor: 'initialize-release' stamp: 'OJMS 3/15/2015 03:07'!new	| instance |		"Add a row to the matrix"	instance := super new.	1 to: 2 do: [ :i | | row |		"Create the row of pegs"		row := RectangleMorph new.		row cellInset: 5.		row hResizing: #shrinkWrap.		row layoutInset: 5.		row layoutPolicy: TableLayout new.		row listDirection: #leftToRight.		row vResizing: #shrinkWrap.				"Don't care about dat background morph, yo"		row borderWidth: 0.		row color: Color transparent.		"Add the pegs to this row"		1 to: 2 do: [ :j | | peg |			peg := SmallPeg new.			instance addPeg: peg.			row addMorph: peg.		].					instance addMorph:	row.	].		^instance.! !PegCollection subclass: #ButtonBoard	instanceVariableNames: 'callback indCreated indicator selectedColor'	classVariableNames: ''	poolDictionaries: ''	category: 'Mastermind'!!ButtonBoard methodsFor: 'accessing' stamp: 'OJMS 3/18/2015 21:33'!addIndicator: peg	"Add an indicator to the array of all indicator pegs"	indCreated := indCreated + 1.	indicator at: ((total + 1) - indCreated) put: peg.	"total + 1 aligns this to a 1-based array, and the (total + 1) - created	prevents the ordering of the pegs in the array from appearing in	reverse order when on display"! !!ButtonBoard methodsFor: 'accessing' stamp: 'OJMS 3/18/2015 22:35'!getSelectedColor	"Get the color of the selected thingy"	^selectedColor.! !!ButtonBoard methodsFor: 'accessing' stamp: 'OJMS 3/18/2015 22:35'!setSelectedColor: clr	"Set the color of the selected thingy"	selectedColor := clr.! !!ButtonBoard methodsFor: 'initialization' stamp: 'OJMS 3/18/2015 21:31'!initIndArray	"Create the array to hold all of the indicator pegs"	indicator := Array new: total.! !!ButtonBoard methodsFor: 'initialization' stamp: 'OJMS 3/18/2015 21:32'!initIndCreated	"Set the total number of indicator pegs to 0"	indCreated := 0.! !!ButtonBoard methodsFor: 'event handling' stamp: 'OJMS 3/18/2015 23:23'!action: cbk	"Set the BlockContext ButtonBoard will call when it is clicked"	callback := cbk.! !!ButtonBoard methodsFor: 'event handling' stamp: 'OJMS 3/19/2015 05:07'!pegClicked: peg	| colorMgr |	"Change indicator for the selected peg"	1 to: total do: [ :i | | ind |		ind := indicator at: i.		ind setColor: 3.		( ind getPegNumber == peg getPegNumber )			ifTrue: [				ind setColor: 1.			].				ind changed.	].	"Change the internal color indicator"	colorMgr := PlayerColors new.	self setSelectedColor: ( colorMgr getColorIndex: ( peg color ) ).	"Trigger the callback"	callback value.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ButtonBoard class	instanceVariableNames: ''!!ButtonBoard class methodsFor: 'initialize-release' stamp: 'OJMS 3/18/2015 22:56'!new	| instance |	"Create enough room for the button board"	instance := super new: 6.	instance cellInset: 5.	instance layoutInset: 5.	instance listDirection: #topToBottom.	instance unlock.	"Initialize memory for the indicator pegs"	instance initIndCreated.	instance initIndArray.		1 to: 6 do: [ :i | | indicator peg row |		"Create a row to put a peg and an indicator"		row := RectangleMorph new.		row cellInset: 5.		row hResizing: #shrinkWrap.		row layoutPolicy: TableLayout new.		row listDirection: #leftToRight.		row vResizing: #shrinkWrap.		"Hide yo kids, hide yo wife"		row borderWidth: 0.		row color: Color transparent.				"Create the peg the user will click on"		peg := BigPeg new.		peg setColor: 7 - i.		peg setPegNumber: i.		peg action: [			instance pegClicked: peg.		].				"Create an indicator"		indicator := SmallPeg new.		indicator setColor: 3.		indicator setPegNumber: i.		( i == 6 )			ifTrue: [ | colorMgr |				colorMgr := AnswerColors new.				indicator setColor: 1.				instance setSelectedColor: ( colorMgr getColorIndex: ( indicator color ) )..			].		"Add stuff in"		row addMorph: indicator.		row addMorph: peg.		instance addIndicator: indicator.		instance addPeg: peg..		instance addMorph: row.	].		^instance.! !Colors subclass: #PlayerColors	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Mastermind'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PlayerColors class	instanceVariableNames: ''!!PlayerColors class methodsFor: 'initialize-release' stamp: 'OJMS 3/18/2015 19:15'!new	| instance |	"Create the array of colors for the player's pegs"	instance := super new: 7.	instance addColor: Color red.	instance addColor: Color orange.	instance addColor: Color yellow.	instance addColor: Color green.	instance addColor: Color lightBlue.	instance addColor: Color blue.	instance addColor: Color transparent.	^instance.! !PegCollection subclass: #PlayerPegs	instanceVariableNames: 'callback clickedPeg'	classVariableNames: ''	poolDictionaries: ''	category: 'Mastermind'!!PlayerPegs methodsFor: 'accessing' stamp: 'OJMS 3/19/2015 00:22'!getClickedPeg	"Get the index of the peg which was clicked"	^clickedPeg.! !!PlayerPegs methodsFor: 'accessing' stamp: 'OJMS 3/18/2015 18:47'!getPeg: peg	"Get the marking mode of a peg"	( peg between: 1 and: 6 )		ifTrue: [ | color item |			color := PlayerColors new.			item := pegs at: peg.						^color getColorIndex: ( item color ).		].! !!PlayerPegs methodsFor: 'accessing' stamp: 'OJMS 3/19/2015 02:48'!setPeg: peg mode: mode	"Mark a peg with a color"	( peg between: 1 and: 4 )		ifTrue: [			( mode between: 1 and: 7 )				ifTrue: [ | color item |					color := PlayerColors new.					item := pegs at: peg.								item setColor: mode.				].		].! !!PlayerPegs methodsFor: 'event handling' stamp: 'OJMS 3/18/2015 23:52'!action: cbk	"Set the BlockContext PlayerPegs will call when it is clicked"	callback := cbk.! !!PlayerPegs methodsFor: 'event handling' stamp: 'OJMS 3/19/2015 02:35'!pegClicked: peg	"Get the index of the clicked peg"	clickedPeg := peg getPegNumber.	callback value.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PlayerPegs class	instanceVariableNames: ''!!PlayerPegs class methodsFor: 'initialize-release' stamp: 'OJMS 3/19/2015 01:07'!new	| instance |	"Create a row of BigPeg objects for the user to interact with"	instance := super new.	instance cellInset: 5.	instance layoutInset: 5.	instance listDirection: #leftToRight.		1 to: 4 do: [ :i | | peg |		peg := BigPeg new.		peg setPegNumber: i.		peg action: [			instance pegClicked: peg.		].				instance addPeg: peg.		instance addMorph: peg.	].		^instance.! !RectangleMorph subclass: #RestartButton	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Mastermind'!!RestartButton methodsFor: 'as yet unclassified' stamp: 'JJG 3/19/2015 02:04'!handlesMouseDown: evt 	^true.! !!RestartButton methodsFor: 'as yet unclassified' stamp: 'JJG 3/19/2015 05:02'!mouseUp: evt	| newGame |	newGame := GameBoard new: 10.	newGame openInWorld.	owner abandon.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RestartButton class	instanceVariableNames: ''!!RestartButton class methodsFor: 'as yet unclassified' stamp: 'JJG 3/19/2015 02:10'!new	| instance text |	instance := super new.	instance extent: 50@150.	text := TextMorph new.	text position:9@60.	text contents: 'Reset'.	text lock.	instance addMorph: text.	^instance.! !RectangleMorph subclass: #Row	instanceVariableNames: 'answers callback clickedPeg player'	classVariableNames: ''	poolDictionaries: ''	category: 'Mastermind'!!Row methodsFor: 'initialization' stamp: 'OJMS 3/15/2015 03:27'!setAnswers: ans	"Save a referance to the AnswerPegs object"	answers := ans.! !!Row methodsFor: 'initialization' stamp: 'OJMS 3/15/2015 03:27'!setPlayer: ply	"Save a referance to the PlayerPegs object"	player := ply.! !!Row methodsFor: 'accessing' stamp: 'OJMS 3/15/2015 03:28'!getAnswers	"Get a reference to the AnswerPegs object"	^answers.! !!Row methodsFor: 'accessing' stamp: 'OJMS 3/19/2015 02:06'!getClickedPeg	"Get the index of the PlayerPeg which was clicked"	^clickedPeg.! !!Row methodsFor: 'accessing' stamp: 'OJMS 3/15/2015 03:28'!getPlayer	"Get a reference to the PlayerPegs object"	^player.! !!Row methodsFor: 'event handling' stamp: 'OJMS 3/19/2015 00:35'!action: cbk	"Set the BlockContext Row will call when it is clicked"	callback := cbk.! !!Row methodsFor: 'event handling' stamp: 'OJMS 3/19/2015 02:59'!pegClicked: peg	"Get the index of the clicked peg"	clickedPeg := peg getClickedPeg.	owner setClickedPeg: (5 - clickedPeg). "Don't ask... sincerely, 2:59 A.M."	callback value.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Row class	instanceVariableNames: ''!!Row class methodsFor: 'initialize-release' stamp: 'OJMS 3/18/2015 20:12'!new	"Create a row, with the answer pegs as visible"	^self new: false.! !!Row class methodsFor: 'initialize-release' stamp: 'OJMS 3/19/2015 01:45'!new: isAnswer	| answer instance player |	"Creates a row of AnswerPegs and PlayerPegs objects"	instance := super new.	instance borderWidth: 0.	instance color: Color transparent.	instance hResizing: #shrinkWrap.	instance layoutPolicy: TableLayout new.	"instance lock."	instance listDirection: #leftToRight.	instance vResizing: #shrinkWrap.	"Build the objects"	answer := AnswerPegs new.	player := PlayerPegs new.	player action: [		instance pegClicked: player.	].	( isAnswer )		ifTrue: [ answer visible: false. ].	"Add the objects to the world"	instance setAnswers: answer.	instance setPlayer: player.	instance addMorph: player.	instance addMorph: answer.		^instance.! !Object subclass: #SetGenerator	instanceVariableNames: ''	classVariableNames: 'RandomSet'	poolDictionaries: ''	category: 'Mastermind'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SetGenerator class	instanceVariableNames: ''!!SetGenerator class methodsFor: 'as yet unclassified' stamp: 'AMM 3/19/2015 05:14'!randomize	"Returns a set of 4 randomized and unique numbers"	RandomSet := Array new: 4.		RandomSet at: 1 put: (1 to: 6) atRandom.	RandomSet at: 2 put: (1 to: 6) atRandom.	RandomSet at: 3 put: (1 to: 6) atRandom.	RandomSet at: 4 put: (1 to: 6) atRandom.	Transcript show: (RandomSet).	^RandomSet! !Peg subclass: #SmallPeg	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Mastermind'!!SmallPeg methodsFor: 'initialization' stamp: 'OJMS 3/18/2015 19:42'!setColor: clr	| colorMgr |	"FIll in the peg with a color"	colorMgr := AnswerColors new.	color := colorMgr getColor: clr.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SmallPeg class	instanceVariableNames: ''!!SmallPeg class methodsFor: 'initialize-release' stamp: 'OJMS 3/14/2015 22:47'!new	"Create a smaller peg from the base Peg class"	^super new: 10.! !RectangleMorph subclass: #StartButton	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Mastermind'!!StartButton methodsFor: 'event handling' stamp: 'JJG 3/19/2015 00:39'!handlesMouseDown: evt	"This Peg will respond to mouse clicks" 	^true.! !!StartButton methodsFor: 'event handling' stamp: 'JJG 3/19/2015 01:30'!mouseUp: evt	"start the game on mouseUp"	| game |	game := GameBoard new: 10.	game openInWorld.	owner abandon.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!StartButton class	instanceVariableNames: ''!!StartButton class methodsFor: 'as yet unclassified' stamp: 'JJG 3/19/2015 01:46'!new	"creates the morph"	| text instance |	instance := super new.	instance hResizing: #shrinkWrap.	instance layoutPolicy: TableLayout new.	instance listDirection: #topToBottom.	instance vResizing: #shrinkWrap.	instance cellInset: 100.	instance color: Color veryPaleRed.	text := TextMorph new.	text contents: 'Start'.	text fontName: #ComicBold size: 18.	text lock.	instance addMorph: text.	^instance.! !